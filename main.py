"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç "–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥"
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import os
from handlers import register_all_handlers
from middleware import setup_middleware

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL –∏ SQLite
DATABASE_URL = os.getenv("DATABASE_URL")

if DATABASE_URL:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL (Railway)
    from database_postgres import Database
else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite (fallback)
    from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
db = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if DATABASE_URL:
    db = Database()  # PostgreSQL
else:
    db = Database()  # SQLite

class TarotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM"""
    waiting_for_name = State()
    waiting_for_birth_date = State()
    waiting_for_birth_time = State()
    waiting_for_birth_place = State()
    waiting_for_photo = State()
    waiting_for_appointment_date = State()
    waiting_for_payment = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    if not db.user_exists(user_id):
        db.add_user(user_id, username)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥*\n\n"
            f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –±—É–¥—É—â–µ–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥—É—Ö–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ. üåô‚ú®\n\n"
            f"–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ç—ã —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è:\n"
            f"Choose your language:\n"
            f"Pasirinkite kalbƒÖ:",
            parse_mode="Markdown"
        )
    else:
        db.update_last_activity(user_id)
        await show_main_menu(message)


@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(message)


async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton(text="üåô –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily_card")],
        [InlineKeyboardButton(text="üîÆ –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="general_reading")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º", callback_data="appointment_offline")],
        [InlineKeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –ø—Ä–∏–µ–º –æ–Ω–ª–∞–π–Ω", callback_data="appointment_online")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞", callback_data="news_feed")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "üîÆ *–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥*\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "daily_card")
async def handle_daily_card(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    from tarot_cards import get_daily_card
    from tarot_images import get_card_full_info, get_tarot_image_from_api
    
    card, is_reversed = get_daily_card()
    interpretation = get_card_meaning(card, is_reversed)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã
    card_visual = get_card_full_info(card, is_reversed)
    
    status = "–ü–ï–†–ï–í–ï–†–ù–£–¢–ê" if is_reversed else "–ü–†–Ø–ú–ê–Ø"
    status_text = "üî¥ –ü–ï–†–ï–í–ï–†–ù–£–¢–ê" if is_reversed else "üü¢ –ü–†–Ø–ú–ê–Ø"
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ API
    image_url = await get_tarot_image_from_api(card["name"])
    
    if image_url:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            caption = (
                f"üåô *–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è*\n\n"
                f"*{card['name']}*\n"
                f"–ü–æ–∑–∏—Ü–∏—è: {status_text}\n\n"
                f"*–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n{interpretation}\n\n"
                f"_–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞_"
            )
            await callback.message.answer_photo(
                photo=image_url,
                caption=caption,
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    await callback.message.edit_text(
        f"üåô *–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è*\n\n"
        f"{card_visual}"
        f"*–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n{interpretation}\n\n"
        f"_–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞_",
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "general_reading")
async def handle_general_reading(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ 3 –∫–∞—Ä—Ç—ã"""
    from tarot_cards import get_three_card_reading
    from tarot_images import get_card_image_url
    
    cards = get_three_card_reading()
    interpretation = get_combined_reading(cards)
    
    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    cards_text = ""
    
    for i, (card, is_reversed) in enumerate(cards, 1):
        position = positions[i-1] if i <= len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i}"
        status = "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞" if is_reversed else "–ø—Ä—è–º–∞—è"
        emoji = get_card_image_url(card['name'], is_reversed)
        cards_text += f"{emoji} {i}. *{card['name']}* ({status})\nüìç {position}\n\n"
    
    await callback.message.edit_text(
        f"üîÆ *–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã*\n\n"
        f"{cards_text}\n"
        f"*–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n\n{interpretation}",
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "profile")
async def handle_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = db.get_user(callback.from_user.id)
    
    if user:
        text = (
            f"üë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"–ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {user.get('rating', 0)}\n"
        )
    else:
        text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    keyboard = [[InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    await callback.answer()


@dp.callback_query(lambda c: c.data == "bonus")
async def handle_bonus(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ë–æ–Ω—É—Å"""
    await callback.message.edit_text(
        "üéÅ *–ë–æ–Ω—É—Å —Ä–∞–∑–¥–µ–ª*\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏! ‚ú®\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç–µ üîÆ",
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "news_feed")
async def handle_news_feed(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã"""
    from lunar_calendar import get_lunar_info
    
    lunar_info = get_lunar_info()
    
    await callback.message.edit_text(
        f"üì∞ *–ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞*\n\n"
        f"üåô {lunar_info['day']}\n"
        f"üìÖ –§–∞–∑–∞ –ª—É–Ω—ã: {lunar_info['phase']}\n"
        f"üåç –ó–Ω–∞–∫ –ª—É–Ω—ã: {lunar_info['sign']}\n\n"
        f"{lunar_info['recommendation']}",
        parse_mode="Markdown"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "appointment_offline" or c.data == "appointment_online")
async def handle_appointment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"""
    is_online = callback.data == "appointment_online"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    slots = db.get_available_slots()
    
    if not slots:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    for slot in slots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ—Ç–æ–≤
        date_str = slot['date']
        time_str = slot['time']
        callback_text = f"slot_{slot['id']}"
        keyboard.append([InlineKeyboardButton(
            text=f"üìÖ {date_str} –≤ {time_str}",
            callback_data=callback_text
        )])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    appointment_type = "–æ–Ω–ª–∞–π–Ω" if is_online else "–ª–∏—á–Ω—ã–π"
    
    await callback.message.edit_text(
        f"üìÖ *–ó–∞–ø–∏—Å—å –Ω–∞ {appointment_type} –ø—Ä–∏–µ–º*\n\n"
        f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 1 —á–∞—Å.\n"
        f"–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    await state.update_data(is_online=is_online)
    await callback.answer()


def get_card_meaning(card, is_reversed):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
    if is_reversed:
        return f"{card.get('reversed', '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}"
    else:
        return f"{card.get('upright', '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}"


def get_combined_reading(cards):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è 3 –∫–∞—Ä—Ç"""
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    interpretations = []
    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    
    for i, (card, is_reversed) in enumerate(cards):
        position = positions[i] if i < len(positions) else "–ü–æ–∑–∏—Ü–∏—è"
        meaning = get_card_meaning(card, is_reversed)
        interpretations.append(f"{position}: {meaning}")
    
    return "\n\n".join(interpretations)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_all_handlers(dp)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    setup_middleware(dp)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if DATABASE_URL:
            # PostgreSQL - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
            await db.init_db()
            logger.info("PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            # SQLite - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º
            import sqlite3
            import os
            
            db_exists = os.path.exists(db.db_path)
            
            if not db_exists:
                db.init_db()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å–æ–∑–¥–∞–Ω–∞")
            else:
                try:
                    conn = sqlite3.connect(db.db_path)
                    cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
                    result = cursor.fetchone()
                    conn.close()
                    
                    if not result:
                        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
                        db.init_db()
                    else:
                        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}. –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...")
                    db.init_db()
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())

