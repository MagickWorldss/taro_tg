"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç "–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥"
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import os
from handlers import register_all_handlers
from middleware import setup_middleware

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL –∏ SQLite
DATABASE_URL = os.getenv("DATABASE_URL")

if DATABASE_URL:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL (Railway)
    from database_postgres_v2 import Database
else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite (fallback)
    from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
db = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if DATABASE_URL:
    db = Database()  # PostgreSQL
else:
    db = Database()  # SQLite

class TarotStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM"""
    waiting_for_name = State()
    waiting_for_birth_date = State()
    waiting_for_birth_time = State()
    waiting_for_birth_place = State()
    waiting_for_photo = State()
    waiting_for_appointment_date = State()
    waiting_for_payment = State()
    waiting_for_slot_date = State()


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    admin_id = int(os.getenv("ADMIN_ID", "0"))
    
    if message.from_user.id != admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏", callback_data="admin_appointments")],
        [InlineKeyboardButton(text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏", callback_data="admin_slots")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if DATABASE_URL:
        stats = await db.get_stats()
    else:
        stats = db.get_stats()
    
    await message.answer(
        f"üîß *–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å*\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats.get('active_appointments', 0)}\n"
        f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {stats.get('total_news', 0)}\n\n"
        f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    if DATABASE_URL:
        # PostgreSQL - –∏—Å–ø–æ–ª—å–∑—É–µ–º async –º–µ—Ç–æ–¥—ã
        if not await db.user_exists(user_id):
            await db.add_user(user_id, username)
        await db.update_last_activity(user_id)
    else:
        # SQLite - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if not db.user_exists(user_id):
            db.add_user(user_id, username)
        db.update_last_activity(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message)


@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(message)


@dp.callback_query(lambda c: c.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
    await callback.answer()
    await show_main_menu(callback)


async def show_main_menu(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton(text="üåô –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="daily_card")],
        [InlineKeyboardButton(text="üîÆ –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="general_reading")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º", callback_data="appointment_offline")],
        [InlineKeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –ø—Ä–∏–µ–º –æ–Ω–ª–∞–π–Ω", callback_data="appointment_online")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞", callback_data="news_feed")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    text = "üîÆ *–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥*\n\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø - callback –∏–ª–∏ message
    if isinstance(message_or_callback, CallbackQuery):
        try:
            # Callback query - –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_or_callback.message.edit_text(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.debug(f"–ù–µ –º–æ–≥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ")
            await message_or_callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    else:
        # Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message_or_callback.answer(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )


@dp.callback_query(lambda c: c.data == "daily_card")
async def handle_daily_card(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
    from tarot_cards import get_daily_card, get_card_meaning
    from tarot_images import get_card_full_info, get_tarot_image_from_api
    from datetime import datetime, timedelta
    
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
    if DATABASE_URL:
        can_get = await db.can_get_daily_card(user_id)
        
        if not can_get:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
            saved_card_data = await db.get_daily_card_data(user_id)
            
            if saved_card_data:
                card = saved_card_data
                is_reversed = saved_card_data.get('is_reversed', False)
                interpretation = get_card_meaning(card, is_reversed)
            else:
                # –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
                await callback.message.edit_text(
                    "‚è∞ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –¥–Ω—è! –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",
                    reply_markup=reply_markup
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–∏–Ω–≥ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
            try:
                row = await db.get_user(user_id)
                if row and row.get('last_daily_card'):
                    last_time = row['last_daily_card']
                    if isinstance(last_time, str):
                        last_time = datetime.fromisoformat(last_time)
                    next_time = last_time + timedelta(hours=24)
                    hours_left = (next_time - datetime.now()).total_seconds() / 3600
                    hours_left = max(0, int(hours_left))
                else:
                    hours_left = 24
            except:
                hours_left = 24
        else:
            # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
            card, is_reversed = get_daily_card(user_id=user_id)
            interpretation = get_card_meaning(card, is_reversed)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            await db.save_daily_card(user_id, {
                'name': card['name'],
                'upright': card.get('upright', ''),
                'reversed': card.get('reversed', ''),
                'is_reversed': is_reversed
            })
            
            hours_left = 24
    else:
        # –î–ª—è SQLite –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        card, is_reversed = get_daily_card(user_id=user_id)
        interpretation = get_card_meaning(card, is_reversed)
        hours_left = 24
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã
    card_visual = get_card_full_info(card, is_reversed)
    status_text = "üî¥ –ü–ï–†–ï–í–ï–†–ù–£–¢–ê" if is_reversed else "üü¢ –ü–†–Ø–ú–ê–Ø"
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_url = await get_tarot_image_from_api(card["name"])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã
    if hours_left == 24:
        time_text = "_–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞_"
    elif hours_left > 0:
        time_text = f"_–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours_left} —á–∞—Å(–æ–≤)_"
    else:
        time_text = "_–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!_"
    
    text = (
        f"üåô *–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è*\n\n"
        f"*{card['name']}*\n"
        f"–ü–æ–∑–∏—Ü–∏—è: {status_text}\n\n"
        f"*–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n{interpretation}\n\n"
        f"{time_text}"
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    if image_url:
        try:
            from aiogram.types import BufferedInputFile
            import aiohttp
            from PIL import Image
            import io
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as response:
                    if response.status == 200:
                        image_bytes = await response.read()
                        
                        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ - –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if is_reversed:
                            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            img = Image.open(io.BytesIO(image_bytes))
                            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤
                            img_rotated = img.rotate(180)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
                            output = io.BytesIO()
                            img_rotated.save(output, format='JPEG')
                            image_bytes = output.getvalue()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                        photo = BufferedInputFile(
                            file=image_bytes,
                            filename=f"{card['name']}.jpg"
                        )
                        
                        await callback.message.answer_photo(
                            photo=photo,
                            caption=text,
                            reply_markup=reply_markup,
                            parse_mode="Markdown"
                        )
                        return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    # Fallback - —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
    await callback.message.edit_text(
        f"üåô *–¢–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è*\n\n{card_visual}*–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n{interpretation}\n\n_–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞_",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "general_reading")
async def handle_general_reading(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ 3 –∫–∞—Ä—Ç—ã"""
    from tarot_cards import get_three_card_reading, get_card_meaning
    from tarot_images import get_tarot_image_from_api
    
    await callback.answer()
    
    cards = get_three_card_reading()
    interpretation = get_combined_reading(cards)
    
    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
    from aiogram.types import InputMediaPhoto, BufferedInputFile
    import aiohttp
    from PIL import Image
    import io
    
    media_group = []
    
    try:
        async with aiohttp.ClientSession() as session:
            for i, (card, is_reversed) in enumerate(cards):
                position = positions[i] if i < len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i+1}"
                status = "üî¥ –ü–ï–†–ï–í–ï–†–ù–£–¢–ê" if is_reversed else "üü¢ –ü–†–Ø–ú–ê–Ø"
                
                # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_url = await get_tarot_image_from_api(card["name"])
                
                if image_url:
                    async with session.get(image_url) as response:
                        if response.status == 200:
                            image_bytes = await response.read()
                            
                            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ - –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                            if is_reversed:
                                img = Image.open(io.BytesIO(image_bytes))
                                img_rotated = img.rotate(180)
                                output = io.BytesIO()
                                img_rotated.save(output, format='JPEG')
                                image_bytes = output.getvalue()
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º caption –¥–ª—è –∫–∞—Ä—Ç—ã
                            caption = f"*{card['name']}*\n{status}\nüìç {position}"
                            
                            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                            photo = BufferedInputFile(
                                file=image_bytes,
                                filename=f"{card['name']}.jpg"
                            )
                            
                            media_group.append(
                                InputMediaPhoto(
                                    media=photo,
                                    caption=caption,
                                    parse_mode="Markdown"
                                )
                            )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        if media_group:
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –±–µ–∑ caption (—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
            # –£–¥–∞–ª—è–µ–º caption —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            caption_text = (
                f"üîÆ *–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã*\n\n"
                f"*–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n\n{interpretation}"
            )
            
            keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
            await callback.message.answer_media_group(media=media_group)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.message.answer(
                caption_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
    
    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    cards_text = ""
    for i, (card, is_reversed) in enumerate(cards, 1):
        position = positions[i-1] if i <= len(positions) else f"–ü–æ–∑–∏—Ü–∏—è {i}"
        status = "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞" if is_reversed else "–ø—Ä—è–º–∞—è"
        cards_text += f"{i}. *{card['name']}* ({status})\nüìç {position}\n\n"
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"üîÆ *–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã*\n\n"
        f"{cards_text}\n"
        f"*–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n\n{interpretation}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "profile")
async def handle_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if DATABASE_URL:
        user = await db.get_user(callback.from_user.id)
    else:
        user = db.get_user(callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    if user:
        name = user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        birth_date = user.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        birth_time = user.get('birth_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        birth_place = user.get('birth_place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        rating = user.get('rating', 0) or 0
        
        text = (
            f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"ID: {callback.from_user.id}\n"
            f"Username: @{callback.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ò–º—è: {name}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
            f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}\n"
            f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_place}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: ‚≠ê {rating}\n"
        )
    else:
        text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."
    
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(text, reply_markup=reply_markup)


@dp.callback_query(lambda c: c.data == "edit_profile")
async def handle_edit_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.answer()
    
    keyboard = [
        [InlineKeyboardButton(text="üìù –ò–º—è", callback_data="edit_name")],
        [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_birth_date")],
        [InlineKeyboardButton(text="üïê –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_birth_time")],
        [InlineKeyboardButton(text="üìç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_birth_place")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "edit_name")
async def handle_edit_name(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏"""
    await callback.answer()
    await state.set_state(TarotStates.waiting_for_name)
    
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üìù *–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "edit_birth_date")
async def handle_edit_birth_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.answer()
    await state.set_state(TarotStates.waiting_for_birth_date)
    
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üìÖ *–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "edit_birth_time")
async def handle_edit_birth_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.answer()
    await state.set_state(TarotStates.waiting_for_birth_time)
    
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üïê *–í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
        "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "edit_birth_place")
async def handle_edit_birth_place(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    await callback.answer()
    await state.set_state(TarotStates.waiting_for_birth_place)
    
    keyboard = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üìç *–í–≤–µ–¥–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è*\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "cancel_edit")
async def handle_cancel_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    await state.clear()
    
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(TarotStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    name = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if DATABASE_URL:
        await db.update_user(message.from_user.id, name=name)
    else:
        db.update_user(message.from_user.id, name=name)
    
    await state.clear()
    
    keyboard = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {name}",
        reply_markup=reply_markup
    )


@dp.message(TarotStates.waiting_for_birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if DATABASE_URL:
        await db.update_user(message.from_user.id, birth_date=birth_date)
    else:
        db.update_user(message.from_user.id, birth_date=birth_date)
    
    await state.clear()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {birth_date}",
        reply_markup=reply_markup
    )


@dp.message(TarotStates.waiting_for_birth_time)
async def process_birth_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_time = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if DATABASE_URL:
        await db.update_user(message.from_user.id, birth_time=birth_time)
    else:
        db.update_user(message.from_user.id, birth_time=birth_time)
    
    await state.clear()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {birth_time}",
        reply_markup=reply_markup
    )


@dp.message(TarotStates.waiting_for_birth_place)
async def process_birth_place(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_place = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if DATABASE_URL:
        await db.update_user(message.from_user.id, birth_place=birth_place)
    else:
        db.update_user(message.from_user.id, birth_place=birth_place)
    
    await state.clear()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"‚úÖ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {birth_place}",
        reply_markup=reply_markup
    )


@dp.message(TarotStates.waiting_for_slot_date)
async def process_slot_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞"""
    admin_id = int(os.getenv("ADMIN_ID", "0"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id != admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        await state.clear()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        date = parts[0]
        time = parts[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if DATABASE_URL:
            success = await db.add_slot(date, time)
        else:
            success = db.add_slot(date, time)
        
        await state.clear()
        
        if success:
            keyboard = [
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤", callback_data="admin_slots")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await message.answer(
                f"‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üïê –í—Ä–µ–º—è: {time}",
                reply_markup=reply_markup
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 29.10.2025 14:00"
        )


@dp.callback_query(lambda c: c.data == "bonus")
async def handle_bonus(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ë–æ–Ω—É—Å"""
    await callback.answer()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üéÅ *–ë–æ–Ω—É—Å —Ä–∞–∑–¥–µ–ª*\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏! ‚ú®\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç–µ üîÆ",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "news_feed")
async def handle_news_feed(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã"""
    from lunar_calendar import get_lunar_info
    
    await callback.answer()
    
    lunar_info = get_lunar_info()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"üì∞ *–ù–æ–≤–æ—Å—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞*\n\n"
        f"üåô {lunar_info['day']}\n"
        f"üìÖ –§–∞–∑–∞ –ª—É–Ω—ã: {lunar_info['phase']}\n"
        f"üåç –ó–Ω–∞–∫ –ª—É–Ω—ã: {lunar_info['sign']}\n\n"
        f"{lunar_info['recommendation']}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "appointment_online")
async def handle_online_appointment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –æ–Ω–ª–∞–π–Ω - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º"""
    await callback.answer()
    
    admin_user_id = os.getenv("ADMIN_ID", "0")
    admin_username = os.getenv("ADMIN_USERNAME", "")
    
    keyboard = []
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_link = None
    
    if admin_username and admin_username != "admin":
        # –ï—Å–ª–∏ –µ—Å—Ç—å username - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        admin_link = f"https://t.me/{admin_username}"
    elif admin_user_id != "0":
        # –ï—Å–ª–∏ –µ—Å—Ç—å ID - –∏—Å–ø–æ–ª—å–∑—É–µ–º t.me —Å —á–∏—Å–ª–æ–≤—ã–º ID
        admin_link = f"tg://user?id={admin_user_id}"
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "üíª *–õ–∏—á–Ω—ã–π –ø—Ä–∏–µ–º –æ–Ω–ª–∞–π–Ω*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –≤–∞–º –æ—Ç–≤–µ—á—É.\n\n"
            "–î–ª—è —Å–≤—è–∑–∏ –Ω–∞–π–¥–∏—Ç–µ –º–µ–Ω—è –≤ –ø–æ–∏—Å–∫–µ Telegram.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_link:
        keyboard.append([InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            url=admin_link
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üíª *–õ–∏—á–Ω—ã–π –ø—Ä–∏–µ–º –æ–Ω–ª–∞–π–Ω*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –≤–∞–º –æ—Ç–≤–µ—á—É.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å–æ –º–Ω–æ–π:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "appointment_offline")
async def handle_offline_appointment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    if DATABASE_URL:
        slots = await db.get_available_slots()
    else:
        slots = db.get_available_slots()
    
    if not slots:
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "üìÖ *–ó–∞–ø–∏—Å—å –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º*\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = []
    for slot in slots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ—Ç–æ–≤
        date_str = slot['date']
        time_str = slot['time']
        slot_id = slot['id']
        keyboard.append([InlineKeyboardButton(
            text=f"üìÖ {date_str} –≤ {time_str}",
            callback_data=f"slot_{slot_id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üìÖ *–ó–∞–ø–∏—Å—å –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º*\n\n"
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 1 —á–∞—Å.\n"
        "–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("slot_"))
async def handle_slot_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–æ—Ç–∞ –∏–∑ callback_data
    slot_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –ë—Ä–æ–Ω–∏—Ä—É–µ–º —Å–ª–æ—Ç
    try:
        if DATABASE_URL:
            await db.book_slot(user_id, slot_id, "offline")
            slot = await db.get_slot(slot_id)
        else:
            db.book_slot(user_id, slot_id, "offline")
            slot = db.get_slot(slot_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        date_str = slot.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        time_str = slot.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        
        await callback.message.edit_text(
            "‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üïê –í—Ä–µ–º—è: {time_str}\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üôè",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")
        
        keyboard = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "‚ùå *–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )


def get_card_meaning(card, is_reversed):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
    if is_reversed:
        return f"{card.get('reversed', '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}"
    else:
        return f"{card.get('upright', '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}"


@dp.callback_query(lambda c: c.data == "admin_stats")
async def handle_admin_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await callback.answer()
    
    if DATABASE_URL:
        stats = await db.get_stats()
    else:
        stats = db.get_stats()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚ú® –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
        f"üìÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_appointments', 0)}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats.get('active_appointments', 0)}\n"
        f"‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {stats.get('available_slots', 0)}\n"
        f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {stats.get('total_news', 0)}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "admin_users")
async def handle_admin_users(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if DATABASE_URL:
        users = await db.get_all_users(limit=20)
    else:
        users = db.get_all_users(limit=20)
    
    if not users:
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    for i, user in enumerate(users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        user_id = user.get('user_id', '?')
        username = user.get('username', '–ë–µ–∑ username')
        name = user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        rating = user.get('rating', 0)
        text += f"{i}. {name} (@{username})\n   ID: {user_id} | ‚≠ê {rating}\n\n"
    
    if len(users) > 10:
        text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "admin_appointments")
async def handle_admin_appointments(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ó–∞–ø–∏—Å–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    if DATABASE_URL:
        appointments = await db.get_all_appointments(limit=20)
    else:
        appointments = db.get_all_appointments(limit=20)
    
    if not appointments:
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            "üìÖ *–ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º*\n\n"
            "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    text = "üìÖ *–ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º*\n\n"
    for i, appt in enumerate(appointments[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        user_name = appt.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        username = appt.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        date_str = appt.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        time_str = appt.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        status = appt.get('status', 'pending')
        appt_type = appt.get('appointment_type', 'offline')
        
        text += f"{i}. {user_name} (@{username})\n"
        text += f"   üìÖ {date_str} –≤ {time_str}\n"
        text += f"   –¢–∏–ø: {appt_type} | –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    if len(appointments) > 10:
        text += f"... –∏ –µ—â–µ {len(appointments) - 10} –∑–∞–ø–∏—Å–µ–π\n"
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "admin_slots")
async def handle_admin_slots(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
    if DATABASE_URL:
        slots = await db.get_all_slots_async(limit=30)
    else:
        slots = db.get_all_slots(limit=30)
    
    if not slots:
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            "‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏*\n\n"
            "–°–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
    text = "‚è∞ *–í—Å–µ —Å–ª–æ—Ç—ã*\n\n"
    available_count = 0
    booked_count = 0
    
    for i, slot in enumerate(slots[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
        slot_id = slot.get('id', '?')
        date_str = slot.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        time_str = slot.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        is_booked = slot.get('is_booked', False)
        
        status = "üî¥ –ó–∞–Ω—è—Ç" if is_booked else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
        if not is_booked:
            available_count += 1
        else:
            booked_count += 1
        
        text += f"{i}. {date_str} {time_str} - {status}\n"
    
    if len(slots) > 15:
        text += f"\n... –∏ –µ—â–µ {len(slots) - 15} —Å–ª–æ—Ç–æ–≤\n"
    
    text += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: {available_count}\nüî¥ –ó–∞–Ω—è—Ç—ã—Ö: {booked_count}"
    
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "admin_add_slot")
async def handle_admin_add_slot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç"""
    await callback.answer()
    
    from datetime import datetime, timedelta
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    keyboard = []
    for day in range(7):
        date = datetime.now() + timedelta(days=day)
        date_str = date.strftime("%d.%m.%Y")
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π
        labels = {
            0: "–°–µ–≥–æ–¥–Ω—è",
            1: "–ó–∞–≤—Ç—Ä–∞",
            2: "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
        }
        label = labels.get(day, date.strftime("%d.%m"))
        
        keyboard.append([InlineKeyboardButton(
            text=f"üìÖ {label} ({date_str})",
            callback_data=f"select_date_{day}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "‚ûï *–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("select_date_"))
async def handle_select_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
    day_offset = int(callback.data.split("_")[-1])
    from datetime import datetime, timedelta
    
    target_date = datetime.now() + timedelta(days=day_offset)
    date_str = target_date.strftime("%d.%m.%Y")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(slot_date=date_str)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏
    times = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
    
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(times), 2):
        row = [InlineKeyboardButton(text=times[i], callback_data=f"select_time_{times[i]}")]
        if i + 1 < len(times):
            row.append(InlineKeyboardButton(text=times[i+1], callback_data=f"select_time_{times[i+1]}"))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –≤—Ä–µ–º–µ–Ω–∞"
    keyboard.append([InlineKeyboardButton(text="‚ûï –í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ (10:00-19:00)", callback_data="select_all_times")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_add_slot")])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    labels = {
        0: "–°–µ–≥–æ–¥–Ω—è",
        1: "–ó–∞–≤—Ç—Ä–∞",
        2: "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    }
    label = labels.get(day_offset, date_str)
    
    await callback.message.edit_text(
        f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {label} ({date_str})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data and c.data.startswith("select_time_"))
async def handle_select_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É
    time = callback.data.split("_")[-1]
    data = await state.get_data()
    date_str = data.get('slot_date')
    
    if not date_str:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    admin_id = int(os.getenv("ADMIN_ID", "0"))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç –≤ –ë–î
    if DATABASE_URL:
        success = await db.add_slot(date_str, time)
    else:
        success = db.add_slot(date_str, time)
    
    await state.clear()
    
    if success:
        keyboard = [
            [InlineKeyboardButton(text="üîÑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ—Ç", callback_data="admin_add_slot")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤", callback_data="admin_slots")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            f"‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üïê –í—Ä–µ–º—è: {time}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞.\n"
            "–°–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=reply_markup
        )


@dp.callback_query(lambda c: c.data == "select_all_times")
async def handle_select_all_times(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω —Å—Ä–∞–∑—É"""
    await callback.answer()
    
    data = await state.get_data()
    date_str = data.get('slot_date')
    
    if not date_str:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞
    times = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
    added_count = 0
    
    for time in times:
        if DATABASE_URL:
            success = await db.add_slot(date_str, time)
        else:
            success = db.add_slot(date_str, time)
        
        if success:
            added_count += 1
    
    await state.clear()
    
    keyboard = [
        [InlineKeyboardButton(text="üîÑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ–Ω—å", callback_data="admin_add_slot")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤", callback_data="admin_slots")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {added_count} –∏–∑ {len(times)}\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üïê –í—Ä–µ–º—è: 10:00 - 19:00\n\n"
        f"{'‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏.' if added_count < len(times) else ''}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "admin_news")
async def handle_admin_news(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–æ–≤–æ—Å—Ç–∏"""
    await callback.answer()
    
    keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        "üì∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏*\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "- –£–¥–∞–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.answer()
    
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏", callback_data="admin_appointments")],
        [InlineKeyboardButton(text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏", callback_data="admin_slots")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    if DATABASE_URL:
        stats = await db.get_stats()
    else:
        stats = db.get_stats()
    
    await callback.message.edit_text(
        f"üîß *–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å*\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats.get('active_appointments', 0)}\n"
        f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {stats.get('total_news', 0)}\n\n"
        f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


def get_combined_reading(cards):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è 3 –∫–∞—Ä—Ç"""
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    interpretations = []
    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    
    for i, (card, is_reversed) in enumerate(cards):
        position = positions[i] if i < len(positions) else "–ü–æ–∑–∏—Ü–∏—è"
        meaning = get_card_meaning(card, is_reversed)
        interpretations.append(f"{position}: {meaning}")
    
    return "\n\n".join(interpretations)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_all_handlers(dp)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    setup_middleware(dp)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if DATABASE_URL:
            # PostgreSQL - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
            await db.init_db()
            logger.info("PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            # SQLite - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º
            import sqlite3
            import os
            
            db_exists = os.path.exists(db.db_path)
            
            if not db_exists:
                db.init_db()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å–æ–∑–¥–∞–Ω–∞")
            else:
                try:
                    conn = sqlite3.connect(db.db_path)
                    cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
                    result = cursor.fetchone()
                    conn.close()
                    
                    if not result:
                        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
                        db.init_db()
                    else:
                        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}. –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...")
                    db.init_db()
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())

