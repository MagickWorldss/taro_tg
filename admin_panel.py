"""
–ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import os
import logging
from aiogram import Bot, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import Dict, List
from database import Database

logger = logging.getLogger(__name__)

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
db = Database()


async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID


async def handle_admin_command(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    command = message.text.split()[0] if message.text else ""
    
    if command == "/admin":
        await show_admin_panel(message, bot)
    elif command == "/admin_stats":
        await show_statistics(message, bot)
    elif command == "/admin_users":
        await show_users(message, bot)
    elif command == "/admin_appointments":
        await show_appointments(message, bot)
    elif command == "/admin_slots":
        await show_slots(message, bot)
    elif command == "/admin_news":
        await show_news_panel(message, bot)


async def show_admin_panel(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏", callback_data="admin_appointments")],
        [InlineKeyboardButton(text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏", callback_data="admin_slots")],
        [InlineKeyboardButton(text="üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏", callback_data="admin_news")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot")],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    stats = db.get_stats()
    
    await message.answer(
        f"üîß *–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å*\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats.get('active_appointments', 0)}\n"
        f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {stats.get('total_news', 0)}\n\n"
        f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def show_statistics(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = db.get_stats()
    
    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_today', 0)}\n"
        f"üìÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_appointments', 0)}\n"
        f"‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {stats.get('available_slots', 0)}\n"
        f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {stats.get('total_news', 0)}\n"
    )
    
    await message.answer(text, parse_mode="Markdown")


async def show_users(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = db.get_all_users(limit=20)
    
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n"
    
    for user in users:
        username = user.get('username', '–ë–µ–∑ username')
        name = user.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        rating = user.get('rating', 0)
        text += f"üë§ {name} (@{username})\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n"
    
    await message.answer(text, parse_mode="Markdown")


async def show_appointments(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏"""
    appointments = db.get_all_appointments(limit=20)
    
    if not appointments:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "üìÖ *–ó–∞–ø–∏—Å–∏:*\n\n"
    
    for apt in appointments:
        status = apt.get('status', 'pending')
        text += f"üìÖ {apt.get('date')} –≤ {apt.get('time')}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await message.answer(text, parse_mode="Markdown")


async def show_slots(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ—Ç—ã"""
    slots = db.get_all_slots(limit=20)
    
    if not slots:
        await message.answer("–°–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = "‚è∞ *–°–ª–æ—Ç—ã:*\n\n"
    
    for slot in slots:
        status = "–ó–∞–Ω—è—Ç" if slot.get('is_booked') else "–°–≤–æ–±–æ–¥–µ–Ω"
        text += f"üìÖ {slot.get('date')} –≤ {slot.get('time')} - {status}\n"
    
    await message.answer(text, parse_mode="Markdown")


async def show_news_panel(message: types.Message, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    news = db.get_all_news(limit=10)
    
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="admin_create_news")],
    ]
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    text = "üì∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏*\n\n"
    
    if news:
        for n in news:
            text += f"üì∞ {n.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            text += f"üìÖ {n.get('created_at', '')}\n\n"
    else:
        text += "–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
    
    await message.answer(text, reply_markup=reply_markup, parse_mode="Markdown")

